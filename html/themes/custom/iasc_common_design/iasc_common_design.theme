<?php

/**
 * @file
 * Template overrides, preprocess, and alter hooks for the OCHA Basic theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_field().
 */
function iasc_common_design_preprocess_field(&$variables, $hook) {
  if (($variables['element']['#field_name'] == 'field_oa_date')) {
    if (!isset($variables['element']['#items'][0])) {
      return;
    }

    $min_date = strtotime($variables['element']['#items'][0]->value);
    $max_date = strtotime($variables['element']['#items'][0]->end_value);

    foreach ($variables['element']['#items'] as $item) {
      $min_date = min($min_date, strtotime($item->value));
      $max_date = max($max_date, strtotime($item->end_value));
    }

    $variables['min_date'] = [
      'day' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'Y'),
    ];
    $variables['max_date'] = [
      'day' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'Y'),
    ];
  }
}

/**
 * Implements template_preprocess_page().
 */
function disabled_iasc_common_design_preprocess_page(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->getType() == 'page') {
      $variables['has_hero_image'] = TRUE;
      $variables['hero_image'] = $node->get('field_featured_image')->view();
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iasc_common_design_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_form_alter().
 */
function iasc_common_design_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // This is for Drupal core search block.
  if ($form_id == 'search_block_form') {
    $form['#attributes']['class'][] = 'cd-search__form';
    $form['#attributes']['aria-labelledby'][] = 'cd-search-btn';
    $form['keys']['#attributes']['placeholder'][] = t('What are you looking for?');
    $form['keys']['#attributes']['class'][] = 'cd-search__input';
    $form['keys']['#attributes']['id'][] = 'cd-search';
    // Theme suggestion for submit element.
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'cd-search__submit';
    $form['actions']['submit']['#attributes']['value'][] = 'Search';
  }

  $includeView = [
    'views-exposed-form-search-content-search'
  ];

  // If in array above, add search--inline attributes.
  if (in_array($form['#id'], $includeView)) {

    // This is for a Views exposed form search block.
    if ($form_id == 'views_exposed_form') {
      $form['#attributes']['class'][] = 'cd-search__form';
      $form['#attributes']['aria-labelledby'][] = 'cd-search-btn';
      $form['keys']['#attributes']['placeholder'][] = t('What are you looking for?');
      $form['keys']['#attributes']['class'][] = 'cd-search__input';
      $form['keys']['#attributes']['type'][] = 'search';
      $form['keys']['#attributes']['id'][] = 'cd-search';
      // Theme suggestion for submit element.
      $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
      $form['actions']['submit']['#attributes']['class'][] = 'cd-search__submit';
      $form['actions']['submit']['#attributes']['value'][] = 'Search';
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function iasc_common_design_preprocess_html(&$vars) {
  // SVG sprite
  // Get the contents of the SVG sprite.
  $icons = file_get_contents( drupal_get_path('theme', 'iasc_common_design') . '/img/icons/icons-sprite.svg');

  // Add a new render array to page_bottom so the icons
  // get added to the page.
  $vars['page_bottom']['icons'] = array(
    '#type' => 'inline_template',
    '#template' => '<span class="hidden">' . $icons . '</span>',
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function iasc_common_design_theme_suggestions_page_alter(&$suggestions, $variables) {
  /**
   * error page template suggestions.
   */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    $suggestions[] = 'page__' . (string) $status_code;
  }
}
