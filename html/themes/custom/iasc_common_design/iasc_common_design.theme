<?php

/**
 * @file
 * Template overrides, preprocess, and alter hooks for the OCHA Basic theme.
 */

use Drupal\media\Entity\Media;
use RRule\RRule;

/**
 * Implements template_preprocess_field().
 */
function iasc_common_design_preprocess_field(&$variables, $hook) {
  if (($variables['element']['#field_name'] == 'field_oa_date')) {
    if (!isset($variables['element']['#items'][0])) {
      return;
    }

    // Assume it ends.
    $variables['is_infinite'] = FALSE;

    // Calculate first/original date.
    $min_date = strtotime($variables['element']['#items'][0]->value);
    $max_date = strtotime($variables['element']['#items'][0]->end_value);

    // Expose it to twig.
    $variables['first_date'] = [
      'day' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'Y'),
      'timestamp' => $variables['element']['#items'][0]->value,
    ];

    // Expose next date.
    $now = strtotime('now');
    $variables['next_date'] = NULL;

    foreach ($variables['element']['#items'] as $item) {
      if (get_class($item) == 'Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem') {
        /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */

        // Infinite?
        $variables['is_infinite'] = $variables['is_infinite'] || $item->getHelper()->isInfinite();

        // Recurring.
        if ($item->isRecurring()) {
          // Generate all occurences.
          foreach ($item->getHelper()->getOccurrences(NULL, NULL, 99) as $date) {
            $min_date = min($min_date, $date->getStart()->getTimestamp());
            $max_date = max($max_date, $date->getEnd()->getTimestamp());

            if ($date->getStart()->getTimestamp() > $now) {
              if (empty($variables['next_date']) || $date->getStart()->getTimestamp() < $variables['next_date']['timestamp']) {
                // Cache till next date.
                $variables['element']['#cache']['max-age'] = $date->getStart()->getTimestamp() - $now;

                // Set next date.
                $variables['next_date'] = [
                  'day' => \Drupal::service('date.formatter')->format($date->getStart()->getTimestamp(), 'custom', 'd'),
                  'month' => \Drupal::service('date.formatter')->format($date->getStart()->getTimestamp(), 'custom', 'M'),
                  'year' => \Drupal::service('date.formatter')->format($date->getStart()->getTimestamp(), 'custom', 'Y'),
                  'timestamp' => $date->getStart()->getTimestamp(),
                ];
              }
            }
          }

          // Translate to text.
          $rule = $item->rrule;
          if ($rule) {
            $parser = new RRule($rule);
            $variables['human_readable'] = $parser->humanReadable([
              'explicit_inifite' => FALSE,
              'dtstart' => FALSE,
              'include_start' => FALSE,
              'include_until' => TRUE,
              'date_formatter' => function ($date) {
                return $date->format('d.m.Y');
              },
            ]);
          }
        }
        else {
          $min_date = min($min_date, strtotime($item->value));
          $max_date = max($max_date, strtotime($item->end_value));
        }
      }
      else {
        $min_date = min($min_date, strtotime($item->value));
        $max_date = max($max_date, strtotime($item->end_value));
      }
    }

    $variables['min_date'] = [
      'day' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'Y'),
    ];
    $variables['max_date'] = [
      'day' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'Y'),
    ];

    if (empty($variables['next_date'])) {
      $variables['next_date'] = $variables['min_date'];
    }
  }
}

/**
 * Implements template_preprocess_node().
 */
function iasc_common_design_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['elements']['#node'];

  if ($node->hasField('field_oa_date') && $node->field_oa_date->first() && is_numeric(strtotime($node->field_oa_date->first()->value))) {
    // Check if all paragraph fields are empty. If so, remove instance.
    if (count($node->field_agenda_items) > 0) {
      $entity = $node->field_agenda_items->first()->entity;
      $field_definitions = $entity->getFieldDefinitions();
      $all_empty = TRUE;
      foreach ($node->field_agenda_items->referencedEntities() as $delta => $entity) {
        $this_empty = TRUE;
        foreach ($field_definitions as $field_name => $definition) {
          if (!method_exists($definition, 'isBaseField')) {
            $field_instance = $entity->get($field_name);
            if (!$field_instance->isEmpty()) {
              $all_empty = FALSE;
              $this_empty = FALSE;
            }
          }
        }

        if ($this_empty) {
          unset($variables['content']['field_agenda_items'][$delta]);
        }
      }

      if ($all_empty) {
        unset($variables['content']['field_agenda_items']);
      }
    }

    if (count($node->field_additional_locations) > 0) {
      $entity = $node->field_additional_locations->first()->entity;
      $field_definitions = $entity->getFieldDefinitions();
      $all_empty = TRUE;
      foreach ($node->field_additional_locations->referencedEntities() as $delta => $entity) {
        $this_empty = TRUE;
        foreach ($field_definitions as $field_name => $definition) {
          if (!method_exists($definition, 'isBaseField')) {
            $field_instance = $entity->get($field_name);
            if (!$field_instance->isEmpty()) {
              $all_empty = FALSE;
              $this_empty = FALSE;
            }
          }
        }

        if ($this_empty) {
          unset($variables['content']['field_additional_locations'][$delta]);
        }
      }

      if ($all_empty) {
        unset($variables['content']['field_additional_locations']);
      }
    }

    $variables['event_time'] = [
      'start' => \Drupal::service('date.formatter')
        ->format(strtotime($node->field_oa_date->first()->value), 'custom', 'h.i a'),
      'end' => \Drupal::service('date.formatter')
        ->format(strtotime($node->field_oa_date->first()->end_value), 'custom', 'h.i a'),
      'all_day' => FALSE,
      'timezone' => $node->field_oa_date->first()->timezone,
      'timestamp_start' => strtotime($node->field_oa_date->first()->value),
      'timestamp_end' => strtotime($node->field_oa_date->first()->end_value),
    ];

    if ($variables['event_time']['start'] == $variables['event_time']['end']) {
      $variables['event_time']['all_day'] = TRUE;
      $variables['event_time']['output'] = '(All day)';
      if (isset($variables['content']['field_oa_date'][0]['#date']['start_date'])) {
        $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'])[0];
        $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'])[0];
      }
    }
    elseif ($variables['event_time']['start'] == '00:00' && $variables['event_time']['end'] == '23:59') {
      $variables['event_time']['all_day'] = TRUE;
      $variables['event_time']['output'] = '(All day)';
      $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'])[0];
      $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'])[0];
    }
    else {
      $variables['event_time']['output'] = $variables['event_time']['start'] . ' â€” ' . $variables['event_time']['end'] . ' (' . $variables['event_time']['timezone'] . ')';
    }
  }

  $bundle = $node->bundle();

  if ($bundle == 'oa_wiki_page' && ($variables['elements']['#view_mode'] == 'teaser' || $variables['elements']['#view_mode'] == 'title')) {
    $document_file = $node->get('field_media_files')->getValue();

    if (!empty($document_file)) {
      $entity = Media::load($document_file[0]['target_id']);
      $variables['document_file'] = $entity->field_media_file->entity->createFileUrl();
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iasc_common_design_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function iasc_common_design_theme_suggestions_page_alter(&$suggestions, $variables) {
  /**
   * error page template suggestions.
   */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    $suggestions[] = 'page__' . (string) $status_code;
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function iasc_common_design_preprocess_block(&$variables) {

  // Adding custom attribute class for block.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $blockType = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
}


//function iasc_common_design_preprocess_page_title(&$vars) {
//  $node = \Drupal::routeMatch()->getParameter('node');
//  if ($node) {
//    if (!($node->getType() == 'panopoly_landing_page')) {
//      $vars['title'] = "";
//    }
//  }
//}


/**
 * Implements hook_preprocess_form_element().
 */
function iasc_common_design_preprocess_form_element(array &$variables) {
  if (!isset($variables['label'])) {
    return;
  }

  if (isset($variables['element']['#attributes']['data-drupal-facet-id'])) {
    $new_id = 'select--' . str_replace('_', '-', $variables['element']['#attributes']['data-drupal-facet-id']);
    $variables['label']['#attributes']['for'] = $new_id;
    $variables['label']['#attributes']['class'] = 'visually-hidden';
  }
}

/**
 * Implements template_preprocess_select().
 */
function iasc_common_design_preprocess_select(&$variables) {
  template_preprocess_select($variables);

  if (isset($variables['element']['#attributes']['data-drupal-facet-id'])) {
    $new_id = 'select--' . str_replace('_', '-', $variables['element']['#attributes']['data-drupal-facet-id']);
    $variables['attributes']['id'] = $new_id;
    $variables['attributes']['aria-labelledby'] = $variables['element']['#attributes']['data-drupal-facet-id'];
  }
}
