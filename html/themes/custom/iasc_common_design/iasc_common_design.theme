<?php

/**
 * @file
 * Template overrides, preprocess, and alter hooks for the OCHA Basic theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_field().
 */
function iasc_common_design_preprocess_field(&$variables, $hook) {
  if (($variables['element']['#field_name'] == 'field_oa_date')) {
    if (!isset($variables['element']['#items'][0])) {
      return;
    }

    $min_date = strtotime($variables['element']['#items'][0]->value);
    $max_date = strtotime($variables['element']['#items'][0]->end_value);

    foreach ($variables['element']['#items'] as $item) {
      $min_date = min($min_date, strtotime($item->value));
      $max_date = max($max_date, strtotime($item->end_value));
    }

    $variables['min_date'] = [
      'day' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($min_date, 'custom', 'Y'),
    ];
    $variables['max_date'] = [
      'day' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'd'),
      'month' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'M'),
      'year' => \Drupal::service('date.formatter')->format($max_date, 'custom', 'Y'),
    ];
  }
}

/**
 * Implements template_preprocess_node().
 */
function iasc_common_design_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['elements']['#node'];

  if ($node->hasField('field_oa_date') && $node->field_oa_date->first() && is_numeric(strtotime($node->field_oa_date->first()->value))) {
    $variables['event_time'] = [
      'start' => \Drupal::service('date.formatter')->format(strtotime($node->field_oa_date->first()->value), 'custom', 'H:i'),
      'end' => \Drupal::service('date.formatter')->format(strtotime($node->field_oa_date->first()->end_value), 'custom', 'H:i'),
      'all_day' => FALSE,
    ];

    if ($variables['event_time']['start'] == $variables['event_time']['end']) {
      $variables['event_time']['all_day'] = TRUE;
      $variables['event_time']['output'] = '(All day)';
      if (isset($variables['content']['field_oa_date'][0]['#date']['start_date'])) {
        $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'])[0];
        $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'])[0];
      }
    }
    elseif ($variables['event_time']['start'] == '00:00' && $variables['event_time']['end'] == '23:59') {
      $variables['event_time']['all_day'] = TRUE;
      $variables['event_time']['output'] = '(All day)';
      $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['start_date']['#text'])[0];
      $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'] = explode(' - ', $variables['content']['field_oa_date'][0]['#date']['end_date']['#text'])[0];
    }
    else {
      $variables['event_time']['output'] = $variables['event_time']['start'] . ' to ' . $variables['event_time']['end'];
    }
  }
}

/**
 * Implements template_preprocess_page().
 */
function disabled_iasc_common_design_preprocess_page(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->getType() == 'page') {
      $variables['has_hero_image'] = TRUE;
      $variables['hero_image'] = $node->get('field_featured_image')->view();
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function iasc_common_design_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}


/**
 * Implements hook_preprocess_html().
 */
function iasc_common_design_preprocess_html(&$vars) {
  // SVG sprite
  // Get the contents of the SVG sprite.
  $icons = file_get_contents( drupal_get_path('theme', 'iasc_common_design') . '/img/icons/cd-icons-sprite.svg');

  // Add a new render array to page_bottom so the icons
  // get added to the page.
  $vars['page_bottom']['icons'] = array(
    '#type' => 'inline_template',
    '#template' => '<span class="hidden">' . $icons . '</span>',
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function iasc_common_design_theme_suggestions_page_alter(&$suggestions, $variables) {
  /**
   * error page template suggestions.
   */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    $suggestions[] = 'page__' . (string) $status_code;
  }
}


/**
 * Implements template_preprocess_region().
 */
function iasc_common_design_preprocess_region(&$variables) {

  $variables['has_filter'] = FALSE;

  if (isset($variables['region']) && $variables['region'] == 'sidebar_first') {
    $view_id = \Drupal::routeMatch()->getParameter('view_id');

    if ($view_id === 'iasc_services' || 'resources') {
      $variables['attributes']['class'][] = 'cd-filter';
    }

    $variables['has_filter'] = TRUE;
  }

  // Create the $content variable that templates expect.
  $variables['content'] = $variables['elements']['#children'];
  $variables['region'] = $variables['elements']['#region'];
}


/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function iasc_common_design_preprocess_block(&$variables) {

  // Adding custom attribute class for block.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $blockType = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
}

function iasc_common_design_preprocess_page_title(&$vars) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $vars['title'] = "";
  }
}

