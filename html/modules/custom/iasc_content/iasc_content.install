<?php

/**
 * @file
 * IASC Content helpers.
 */

use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\group\Entity\Group;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/**
 * Add default content to spaces.
 */
function iasc_content_update_8001() {
  $groups = \Drupal::entityTypeManager()->getStorage('group')->loadByProperties(['type' => 'iasc_space']);

  foreach ($groups as $id => $group) {
    iasc_content_space_content_defaults($id);
    iasc_content_space_sidebar_defaults($id);
  }
}

/**
 * Make sure text format is set everywhere.
 */
function iasc_content_update_8002() {
  $connection = \Drupal::database();

  $sql = "update {node__body} set body_format = 'basic_html' where body_format IS NULL OR body_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node_revision__body} set body_format = 'basic_html' where body_format IS NULL OR body_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {group__field_description} set field_description_format = 'basic_html' where field_description_format IS NULL OR field_description_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {group__field_responsibilities} set field_responsibilities_format = 'basic_html' where field_responsibilities_format IS NULL OR field_responsibilities_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node__field_ap_progress_overview} set field_ap_progress_overview_format = 'basic_html' where field_ap_progress_overview_format IS NULL OR field_ap_progress_overview_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node_revision__field_ap_progress_overview} set field_ap_progress_overview_format = 'basic_html' where field_ap_progress_overview_format IS NULL OR field_ap_progress_overview_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node__field_info_private} set field_info_private_format = 'basic_html' where field_info_private_format IS NULL OR field_info_private_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node_revision__field_info_private} set field_info_private_format = 'basic_html' where field_info_private_format IS NULL OR field_info_private_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node__field_responsibilities} set field_responsibilities_format = 'basic_html' where field_responsibilities_format IS NULL OR field_responsibilities_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {node_revision__field_responsibilities} set field_responsibilities_format = 'basic_html' where field_responsibilities_format IS NULL OR field_responsibilities_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {paragraph__field_ai_description} set field_ai_description_format = 'basic_html' where field_ai_description_format IS NULL OR field_ai_description_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {paragraph_revision__field_ai_description} set field_ai_description_format = 'basic_html' where field_ai_description_format IS NULL OR field_ai_description_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {paragraph__field_paragraph_text} set field_paragraph_text_format = 'basic_html' where field_paragraph_text_format IS NULL OR field_paragraph_text_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {paragraph_revision__field_paragraph_text} set field_paragraph_text_format = 'basic_html' where field_paragraph_text_format IS NULL OR field_paragraph_text_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);

  $sql = "update {user__field_user_about} set field_user_about_format = 'basic_html' where field_user_about_format IS NULL OR field_user_about_format = 'panopoly_wysiwyg_text'";
  $connection->query($sql);
}

/**
 * Convert file field to media field.
 */
function iasc_content_update_8003() {
  iasc_content_file_field_to_media();
}

/**
 * Convert oa section field.
 */
function iasc_content_update_8004() {
  iasc_content_convert_oa_section_ref();
}

/**
 * Update membership position.
 */
function iasc_content_update_8005() {
  iasc_content_membership_position_to_list();
}

/**
 * Convert oa_section_ref.
 */
function iasc_content_update_8006() {
  iasc_content_convert_oa_section_ref();
}

/**
 * Remove comment module.
 */
function iasc_content_update_8007() {
  $fields = [
    'comment_node_contact',
    'comment_node_action_point',
    'comment_node_announcement',
    'comment_node_contact',
    'comment_node_oa_discussion_post',
    'comment_node_oa_event',
    'comment_node_oa_group',
    'comment_node_oa_ical_importer',
    'comment_node_oa_section',
    'comment_node_oa_space',
    'comment_node_oa_team',
    'comment_node_oa_wiki_page',
    'comment_node_oa_worktracker_task',
    'comment_node_panopoly_page',
  ];

  foreach ($fields as $field) {
    if ($field = FieldStorageConfig::loadByName('node', $field)) {
      $field->delete();
    }
  }

  \Drupal::service("entity_field.manager")->getFieldStorageDefinitions("node")["comment"]->delete();

  // Purge all data.
  field_purge_batch(20000);

  \Drupal::service('module_installer')->uninstall(['comment']);
}

/**
 * Fix published date.
 */
function iasc_content_update_8008() {
  $connection = \Drupal::database();

  $sql = "update {node__field_published_date} set field_published_date_value = left(field_published_date_value, 10)";
  $connection->query($sql);

  $sql = "update {node_revision__field_published_date} set field_published_date_value = left(field_published_date_value, 10)";
  $connection->query($sql);
}

/**
 * Delete non-existing groups.
 */
function iasc_content_update_8009() {
  $connection = \Drupal::database();

  $sql = "delete from {node__field_iasc_audience} where field_iasc_audience_target_id not in (select id from {groups});";
  $connection->query($sql);

  $sql = "delete from {node_revision__field_iasc_audience} where field_iasc_audience_target_id not in (select id from {groups});";
  $connection->query($sql);
}

/**
 * Remove comment module.
 */
function iasc_content_update_8010() {
  $fields = [
    'comment_node_contact',
    'comment_node_action_point',
    'comment_node_announcement',
    'comment_node_contact',
    'comment_node_oa_discussion_post',
    'comment_node_oa_event',
    'comment_node_oa_group',
    'comment_node_oa_ical_importer',
    'comment_node_oa_section',
    'comment_node_oa_space',
    'comment_node_oa_team',
    'comment_node_oa_wiki_page',
    'comment_node_oa_worktracker_task',
    'comment_node_panopoly_page',
  ];

  foreach ($fields as $field) {
    if ($field = FieldStorageConfig::loadByName('node', $field)) {
      $field->delete();
    }
  }

  if (\Drupal::service('entity_field.manager')->getFieldStorageDefinitions('node')['comment']) {
    \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('node')['comment']->delete();
  }

  // Purge all data.
  try {
    field_purge_batch(20000);
  }
  catch (Exception $e) {
    // Ignore potential errors.
  }

  \Drupal::service('module_installer')->uninstall(['comment']);
}

/**
 * Make sure text format is set everywhere.
 */
function iasc_content_update_8011() {
  $connection = \Drupal::database();

  try {
    $sql = "alter table paragraph__field_oa_related_content add column field_oa_related_content_target_type varchar(32) NULL;";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "alter table paragraph_revision__field_oa_related_content add column field_oa_related_content_target_type varchar(32) NULL;";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "update paragraph__field_oa_related_content set field_oa_related_content_target_type = 'node';";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "update paragraph_revision__field_oa_related_content set field_oa_related_content_target_type = 'node';";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "alter table paragraph__field_piece_of_content add column field_piece_of_content_target_type varchar(32) NULL;";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "alter table paragraph_revision__field_piece_of_content add column field_piece_of_content_target_type varchar(32) NULL;";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "update paragraph__field_piece_of_content set field_piece_of_content_target_type = 'node';";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }

  try {
    $sql = "update paragraph_revision__field_piece_of_content set field_piece_of_content_target_type = 'node';";
    $connection->query($sql);
  }
  catch (Exception $e) {
    // Just to be safe.
  }
}

/**
 * Add closed date to groups.
 */
function iasc_content_update_8012() {
  $groups_with_close_date = [
    '25014' => '2018-06-27',
    '17676' => '2019-02-01',
    '17171' => '2016-06-10',
    '11831' => '2016-02-19',
    '11706' => '2019-02-01',
    '11701' => '2019-02-01',
    '9771' => '2015-07-23',
    '2651' => '1900-12-31',
    '2615' => '2005-11-21',
    '2623' => '2005-11-21',
    '2631' => '2005-11-21',
    '2824' => '2018-01-01',
    '2820' => '2019-02-01',
    '2816' => '2016-03-31',
    '2779' => '2019-02-01',
    '2812' => '2019-02-01',
    '2808' => '2013-03-30',
    '2795' => '2013-03-30',
    '2791' => '2013-03-30',
    '2787' => '2011-08-05',
    '2783' => '2010-04-05',
    '3521' => '2013-03-30',
    '2775' => '2011-08-05',
    '2771' => '2013-03-30',
    '2767' => '2011-08-05',
    '2763' => '2014-05-31',
    '2759' => '2018-01-01',
    '2755' => '2011-08-05',
    '2751' => '2008-06-30',
    '2743' => '2011-08-05',
    '2747' => '2008-12-31',
    '2619' => '2009-03-31',
    '2731' => '2006-12-31',
    '2727' => '2007-02-20',
    '2655' => '2006-11-08',
    '2643' => '2011-08-05',
    '2675' => '2007-12-06',
    '2679' => '2007-12-07',
    '3501' => '2007-12-31',
    '2635' => '2007-02-01',
    '2739' => '2005-06-01',
    '3491' => '2007-03-19',
    '2639' => '2013-03-30',
    '2647' => '2013-03-30',
    '2699' => '2009-11-02',
    '3481' => '2013-03-30',
  ];

  foreach ($groups_with_close_date as $group_id => $date) {
    $group = Group::load($group_id);
    $group->set('field_date_closed', $date);
    $group->save();
  }
}

/**
 * Double check URL aliases.
 */
function iasc_content_update_8013() {
  $src = drupal_get_path('module', 'iasc_content') . '/nodes-with-url-alias.csv';

  if (($handle = fopen($src, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $nid = $data[0];
      $new_alias = $data[1];
      $system_path = '/node/' . $nid;

      $current_alias = \Drupal::service('path.alias_manager')->getAliasByPath($system_path);
      if ($current_alias != $new_alias) {
        \Drupal::service('path.alias_storage')->save($system_path, $new_alias);
        \Drupal::logger('iasc_content')->notice(
          sprintf('Alias updated for node "%s" to "%s".', $nid, $new_alias)
        );
      }
    }

    fclose($handle);
  }
}

/**
 * Add missing files.
 */
function iasc_content_update_8014() {
  $connection = \Drupal::database();
  $src = drupal_get_path('module', 'iasc_content') . '/files.csv';

  // Fetch existing file Ids.
  $select = $connection->select('file_managed', 'f')->fields('f', ['fid']);
  $existing_fids = $select->execute()->fetchCol();

  if (($handle = fopen($src, "r")) !== FALSE) {
    // Skip header.
    fgetcsv($handle, 1000, ",");

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $fid = $data[0];
      $name = $data[1];
      $path = $data[2];
      $mime = $data[5];
      $size = $data[6];
      $date = $data[8];

      if (empty($size)) {
        $size = 0;
      }

      // Skip existing files.
      if (in_array($fid, $existing_fids)) {
        continue;
      }

      // Create a new UUID.
      $uuid = \Drupal::service('uuid')->generate();

      // Insert a record.
      $connection->insert('file_managed')
        ->fields([
          'fid' => $fid,
          'uuid' => $uuid,
          'langcode' => 'en',
          'uid' => 1,
          'filename' => $name,
          'uri' => $path,
          'filemime' => $mime,
          'filesize' => $size,
          'status' => 1,
          'created' => $date,
          'changed' => $date,
        ])
        ->execute();

      $existing_fids[] = $fid;

      \Drupal::logger('iasc_content')->notice(
        sprintf('File entry added for "%s".', $name)
      );
    }

    fclose($handle);
  }
}

/**
 * Add group admins.
 */
function iasc_content_update_8015() {
  $src = drupal_get_path('module', 'iasc_content') . '/og-members-and-roles.csv';

  if (($handle = fopen($src, "r")) !== FALSE) {
    // Skip header.
    fgetcsv($handle, 1000, ",");

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $group_id = $data[0];
      $uid = $data[1];

      $group = Group::load($group_id);
      if (!$group) {
        \Drupal::logger('iasc_content')->notice(
          sprintf('Unable to load group "%s".', $group_id)
        );
        continue;
      }

      $account = User::load($uid);
      if (!$account) {
        \Drupal::logger('iasc_content')->notice(
          sprintf('Unable to load group "%s".', $uid)
        );
        continue;
      }

      if ($membership = $group->getMember($account)) {
        $roles = $membership->getRoles();
        if (!isset($roles['iasc_space-admin'])) {
          $group_content = $membership->getGroupContent();
          $group_content->group_roles->target_id = 'iasc_space-admin';
          $group_content->save();
        }
      }
    }

    fclose($handle);
  }
}

/**
 * Add missing files to documents.
 */
function iasc_content_update_8016() {
  // Add latest files from production.
  iasc_content_update_8014();

  $entity_type = 'node';
  $from = 'field_oa_media';
  $to = 'field_media_files';
  $media_type = 'file';
  $bundle = 'oa_wiki_page';

  $query = \Drupal::entityQuery($entity_type);
  $query->exists($from);
  $query->condition('type', $bundle);

  $ids = $query->execute();
  $entities = \Drupal::entityTypeManager()
    ->getStorage($entity_type)
    ->loadMultiple($ids);

  foreach ($entities as $entity) {
    // Build list of existing files.
    $target_ids = [];
    foreach ($entity->get($to) as $dest) {
      $target_ids[] = $dest
        ->get('entity')
        ->getTarget()
        ->get('field_media_file')
        ->first()
        ->get('entity')
        ->getValue()
        ->id();
    }

    $needs_update = FALSE;
    foreach ($entity->get($from) as $source) {
      if ($source->entity) {
        if (in_array($source->entity->id(), $target_ids)) {
          continue;
        }

        $needs_update = TRUE;
        $media_entity = _iasc_content_media_entity(
          $source->entity,
          $source->alt,
          $media_type
        );
        $entity->{$to}[] = [
          'target_id' => $media_entity->id(),
        ];
      }
    }

    // Save if the new field has content.
    if ($needs_update) {
      $entity->save();
      \Drupal::logger('iasc_content')->notice(
        sprintf('Updated %s for node "%s" [%s].', $media_type, $entity->label(), $entity->id())
      );
    }
  }
}

/**
 * Update time for all day events.
 */
function iasc_content_update_8017() {
  $connection = \Drupal::database();

  $sql = "update node__field_oa_date set field_oa_date_end_value = replace(field_oa_date_end_value, '00:00:00', '23:59:59'), field_oa_date_timezone = 'UTC' where field_oa_date_value like '%00:00:00' and field_oa_date_end_value like '%00:00:00'";
  $connection->query($sql);

  $sql = "update node_revision__field_oa_date set field_oa_date_end_value = replace(field_oa_date_end_value, '00:00:00', '23:59:59'), field_oa_date_timezone = 'UTC' where field_oa_date_value like '%00:00:00' and field_oa_date_end_value like '%00:00:00'";
  $connection->query($sql);
}

/**
 * Delete unused content types.
 */
function iasc_content_update_8018() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');

  $entities = $storage_handler->loadByProperties(['type' => 'oa_group']);
  $storage_handler->delete($entities);

  $entities = $storage_handler->loadByProperties(['type' => 'oa_space']);
  $storage_handler->delete($entities);

  $entities = $storage_handler->loadByProperties(['type' => 'oa_team']);
  $storage_handler->delete($entities);

  $entities = $storage_handler->loadByProperties(['type' => 'oa_ical_importer']);
  $storage_handler->delete($entities);
}

/**
 * Make media files private.
 */
function iasc_content_update_8019() {
  $connection = \Drupal::database();

  $sql = "select f.fid, f.uri from {media} m inner join {media__field_media_file} mf on m.mid = mf.entity_id inner join {file_managed} f on mf.field_media_file_target_id = f.fid where m.bundle='file' and f.uri not like 'private://%'";
  $query = $connection->query($sql);
  $result = $query->fetchAll();

  $fids = [];
  foreach ($result as $row) {
    $fids[] = $row->fid;
    if (file_exists($row->uri)) {
      $target = str_replace('public://', 'private://', $row->uri);
      $target_dir = 'private://' . dirname(file_uri_target($target));
      file_prepare_directory($target_dir, FILE_CREATE_DIRECTORY);
      file_unmanaged_move($row->uri, $target, FILE_EXISTS_REPLACE);
    }
  }

  $sql = "update file_managed set uri = replace(uri, 'public://', 'private://') where fid in (:fids[])";
  $connection->query($sql, [
    ':fids[]' => $fids,
  ]);
}

/**
 * Remove non-existent config entity.
 *
 * Entity type: node,
 * Bundle: page,
 * Field name: field_banner_image.
 */
function iasc_content_update_8020() {
  $entity_type = 'node';
  $bundle = 'page';
  $field_name = 'field_banner_image';

  iasc_content_fix_entities($entity_type, $bundle, $field_name);
}

/**
 * Change email field to email storage.
 */
function iasc_content_update_8021() {
  $entity_type = 'node';
  $field_name = 'field_email';

  $name = 'field.storage.' . $entity_type . '.' . $field_name;

  // Get the current settings.
  $result = \Drupal::database()->query('SELECT data FROM {config} WHERE name = :name', [
    ':name' => $name,
  ])->fetchField();

  $data = unserialize($result);
  $data['type'] = 'email';
  $data['settings'] = [];

  // Write settings back to the database.
  \Drupal::database()->update('config')
    ->fields(['data' => serialize($data)])
    ->condition('name', $name)
    ->execute();

}

/**
 * Add wrong dates.
 */
function iasc_content_update_8022() {
  $src = drupal_get_path('module', 'iasc_content') . '/wrong-dates.csv';

  if (($handle = fopen($src, "r")) !== FALSE) {
    // Skip header line.
    fgetcsv($handle, 1000, ",");

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $nid = $data[0];
      $start_date = $data[2];
      $end_date = $start_date + 60 * 60;

      $node = Node::load($nid);

      // Only update is date is empty.
      if ($node->field_oa_date->isEmpty()) {
        $node->set('field_oa_date', [
          'value' => gmdate(DateTimeItemInterface::DATETIME_STORAGE_FORMAT, $start_date),
          'end_value' => gmdate(DateTimeItemInterface::DATETIME_STORAGE_FORMAT, $end_date),
          'timezone' => 'UTC',
        ]);

        $node->save();

        \Drupal::logger('iasc_content')->notice(
          sprintf('Date added for "%s".', $nid)
        );
      }
      else {
        \Drupal::logger('iasc_content')->notice(
          sprintf('Skipping "%s".', $nid)
        );
      }
    }

    fclose($handle);
  }
}

/**
 * Add missing dates.
 */
function iasc_content_update_8023() {
  $src = drupal_get_path('module', 'iasc_content') . '/missing-dates.csv';

  if (($handle = fopen($src, "r")) !== FALSE) {
    // Skip header line.
    fgetcsv($handle, 1000, ",");

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      $nid = $data[0];
      $start_date = $data[2];
      $end_date = $data[3];

      $node = Node::load($nid);

      // Only update is date is empty.
      if ($node->field_oa_date->isEmpty()) {
        $node->set('field_oa_date', [
          'value' => gmdate(DateTimeItemInterface::DATETIME_STORAGE_FORMAT, $start_date),
          'end_value' => gmdate(DateTimeItemInterface::DATETIME_STORAGE_FORMAT, $end_date),
          'timezone' => 'UTC',
        ]);

        $node->save();

        \Drupal::logger('iasc_content')->notice(
          sprintf('Date added for "%s".', $nid)
        );
      }
      else {
        \Drupal::logger('iasc_content')->notice(
          sprintf('Skipping "%s".', $nid)
        );
      }
    }

    fclose($handle);
  }
}

/**
 * Change email field to email storage.
 */
function iasc_content_update_8024() {
  \Drupal::database()->query('ALTER TABLE node__field_email MODIFY field_email_value varchar(254) NOT NULL');
  \Drupal::database()->query('ALTER TABLE node_revision__field_email MODIFY field_email_value varchar(254) NOT NULL');

  $entity_type = 'node';
  $field_name = 'field_email';

  $name = 'field.storage.' . $entity_type . '.' . $field_name;

  // Get the current settings.
  $result = \Drupal::database()->query('SELECT data FROM {config} WHERE name = :name', [
    ':name' => $name,
  ])->fetchField();

  $data = unserialize($result);
  $data['type'] = 'email';
  $data['settings'] = [
    'length' => 254,
  ];

  // Write settings back to the database.
  \Drupal::database()->update('config')
    ->fields(['data' => serialize($data)])
    ->condition('name', $name)
    ->execute();
}
