<?php

/**
 * @file
 * IASC Content helpers.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\FileInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_content_form_alter(&$form, &$form_state, $form_id) {
  // Hide legacy fields.
  if (isset($form['field_legacy_publish'])) {
    $form['field_legacy_publish']['#access'] = FALSE;
  }

  if (isset($form['field_legacy_id'])) {
    $form['field_legacy_id']['#access'] = FALSE;
  }
}

/**
 * Add default sidebar blocks to a space.
 */
function iasc_content_space_sidebar_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_sidebar')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add section menu.
  $paragraph = Paragraph::create([
    'type' => 'section_menu',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add documents.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'documents',
    'display_id' => 'recent_documents_list',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add chair.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_contacts',
    'display_id' => 'chair',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_sidebar', $current);
  $group->save();
}

/**
 * Add default content blocks to a space.
 */
function iasc_content_space_content_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_content')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add upcoming meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'upcoming_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add past meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'past_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add recent news.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_content',
    'display_id' => 'block_recent_5',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_content', $current);
  $group->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function iasc_content_group_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'iasc_space') {
    iasc_content_space_content_defaults($entity->id());
    iasc_content_space_sidebar_defaults($entity->id());
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph(&$vars) {
  $paragraph = $vars['paragraph'];
  if (!($paragraph instanceof Paragraph)) {
    return;
  }

  $bundle = $paragraph->bundle();
  switch ($bundle) {
    case 'section_menu':
      iasc_content_preprocess_paragraph_iasc_space_section_menu($vars);
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph_iasc_space_section_menu(&$vars) {
  $paragraph = $vars['paragraph'];

  // Check which links needs to be displayed.
  $group = $paragraph->getParentEntity();
  if (!($group instanceof Group)) {
    return;
  }

  // Only allowed on spaces.
  $group_bundle = $group->bundle();
  if ($group_bundle != 'iasc_space') {
    return;
  }

  $supported_types = [
    'News' => 'announcement',
    'Events' => 'oa_event',
    'Documents' => 'oa_wiki_page',
  ];

  $urls = [];
  foreach ($supported_types as $label => $bundle) {
    $content = $group->getContent('group_node:' . $bundle);
    // If we find a node, add a link to the view.
    if (count($content) > 0) {
      $urls[] = Link::fromTextAndUrl($label, Url::fromUri('internal:/group/2605/content/' . $bundle))->toString();
    }
  }

  $vars['section_links'] = $urls;
}

/**
 * Implements hook_node_access().
 */
function iasc_content_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Only check view mode for anonymous users.
  if (isset($node->group_content_access) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to nodes marked as being public.
    if ($node->group_content_access->value == 1) {
      return AccessResult::allowed();
    }

    // Deny access to nodes marked as being private.
    if ($node->group_content_access->value == 2) {
      return AccessResult::forbidden();
    }
  }

  // Only check view mode for anonymous users.
  if (isset($node->oa_section_ref) && isset($node->oa_section_ref->entity) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to Public section.
    if (strpos($node->oa_section_ref->entity->title->value, '(Public)')) {
      return AccessResult::allowed();
    }

    // Deny access to IASC and Donor section.
    if (strpos($node->oa_section_ref->entity->title->value, '(IASC)') || strpos($node->oa_section_ref->entity->title->value, '(Donor)')) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Convert file field to media field.
 */
function iasc_content_file_field_to_media() {
  $convertions = [
    'node' => [
      'panopoly_page' => [
        'field_featured_image' => 'field_banner_image',
      ],
    ],
  ];

  foreach ($convertions as $entity_type => $entity_info) {
    foreach ($entity_info as $bundle => $bundle_info) {
      $entities = \Drupal::entityTypeManager()
      ->getStorage($entity_type)
      ->loadByProperties(['type' => [$bundle]]);
      foreach ($entities as $entity) {
        foreach ($bundle_info as $from => $to) {
          // Verify that the file field has a value.
          if (!empty($entity->{$from}->entity)) {
            // Create the new media entity and assign it to the new field.
            $entity->{$to}->entity = _iasc_content_media_image_entity(
              $entity->{$from}->entity,
              $entity->{$from}->alt,
              'image'
            );
            $entity->save();
            \Drupal::logger('iasc_content')->notice(
              sprintf('Updated image for node "%s".', $entity->getTitle())
            );
          }
        }
      }
    }
  }
}

/**
 * Creates a media image entity from a file entity.
 *
 * @param \Drupal\file\FileInterface $file
 *   The existing file object.
 * @param string $alt
 *   The image alt text.
 *
 * @return \Drupal\media_entity\Entity\Media
 *   The media entity.
 *
 * @see https://chromatichq.com/blog/migrating-drupal-file-fields-media-entities-without-migrate-module
 */
function _iasc_content_media_image_entity(FileInterface $file, $alt = NULL, $bundle) {
  $media_entity = Media::create([
    'bundle' => $bundle,
    'uid' => '1',
    'name' => $file->alt,
    'status' => TRUE,
    'field_media_image' => [
      'target_id' => $file->id(),
      'alt' => $alt,
    ],
  ]);
  $media_entity->save();
  return $media_entity;
}
