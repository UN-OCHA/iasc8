<?php

/**
 * @file
 * IASC Content helpers.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\Core\Url;
use Drupal\entityqueue\Entity\EntitySubqueue;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\FileInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\search_api\Entity\Index;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_content_form_alter(&$form, &$form_state, $form_id) {
  // Hide legacy fields.
  if (isset($form['field_legacy_publish'])) {
    $form['field_legacy_publish']['#access'] = FALSE;
  }

  if (isset($form['field_legacy_id'])) {
    $form['field_legacy_id']['#access'] = FALSE;
  }

  // Check for group content.
  iasc_content_node_field_group_form_alter($form, $form_state, $form_id);
}

/**
 * Add default sidebar blocks to a space.
 */
function iasc_content_space_sidebar_defaults($id) {
  $group = \Drupal::entityTypeManager()->getStorage('group')->load($id);
  $current = $group->get('field_sidebar')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add chair.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_contacts',
    'display_id' => 'chair',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add section menu.
  $paragraph = Paragraph::create([
    'type' => 'section_menu',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add documents.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'documents',
    'display_id' => 'recent_documents_list',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_sidebar', $current);
  $group->save();
}

/**
 * Add default content blocks to a space.
 */
function iasc_content_space_content_defaults($id) {
  $group = \Drupal::entityTypeManager()->getStorage('group')->load($id);
  $current = $group->get('field_content')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add upcoming meetings.
  $paragraph = Paragraph::create([
    'type' => 'meetings_upcoming',
  ]);
  $paragraph->set('field_max_number_of_events', [
    'value' => 5,
  ]);
  $paragraph->set('field_link_to_all_meetings', [
    'value' => TRUE,
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add past meetings.
  $paragraph = Paragraph::create([
    'type' => 'meetings_past',
  ]);
  $paragraph->set('field_max_number_of_events', [
    'value' => 5,
  ]);
  $paragraph->set('field_link_to_all_meetings', [
    'value' => TRUE,
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_content', $current);
  $group->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function iasc_content_group_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'iasc_space') {
    iasc_content_space_content_defaults($entity->id());
    iasc_content_space_sidebar_defaults($entity->id());
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph(&$vars) {
  $paragraph = $vars['paragraph'];
  if (!($paragraph instanceof Paragraph)) {
    return;
  }

  $bundle = $paragraph->bundle();
  switch ($bundle) {
    case 'section_menu':
      iasc_content_preprocess_paragraph_iasc_space_section_menu($vars);
      break;

    case 'featured':
      iasc_content_preprocess_paragraph_iasc_featured($vars);
      break;

  }
}

/**
 * Build features block.
 */
function iasc_content_preprocess_paragraph_iasc_featured(&$vars) {
  $paragraph = $vars['paragraph'];
  $items = [];

  // Check for hero image.
  if (!$paragraph->field_hero->isEmpty()) {
    $items[] = $paragraph->field_hero->view('default');
  }

  // Render featured queue.
  $entities = EntitySubqueue::load('featured')->get('items')->referencedEntities();
  if (!empty($items)) {
    array_pop($entities);
    $entities = array_slice($entities, 0, 3);
  }
  else {
    $entities = array_slice($entities, 0, 4);
  }

  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');

  foreach ($entities as $node) {
    $items[] = $view_builder->view($node, 'featured');
  }

  $vars['items'] = $items;
}

/**
 * Build section menu for a group.
 */
function iasc_content_build_section_menu($group, $link_to_group = FALSE) {
  $supported_types = [
    'Documents' => 'oa_wiki_page',
    'Meetings' => 'oa_event',
    'News' => 'announcement',
  ];

  $urls = [];

  if ($link_to_group) {
    $urls[] = Link::fromTextAndUrl($group->label(), Url::fromUri('internal:/group/' . $group->id(), [
      'attributes' => [
        'class' => 'link-to-group',
      ],
    ]))->toString();
  }

  foreach ($supported_types as $label => $bundle) {
    $content = $group->getContent('group_node:' . $bundle);
    // If we find a node, add a link to the view.
    if (count($content) > 0) {
      $urls[] = Link::fromTextAndUrl($label, Url::fromUri('internal:/group/' . $group->id() . '/' . strtolower($label), [
        'attributes' => [
          'class' => 'link-to-section',
        ],
      ]))->toString();
    }
  }

  return $urls;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph_iasc_space_section_menu(&$vars) {
  $paragraph = $vars['paragraph'];

  // Check which links needs to be displayed.
  $group = $paragraph->getParentEntity();
  if (!($group instanceof Group)) {
    return;
  }

  // Only allowed on spaces.
  $group_bundle = $group->bundle();
  if ($group_bundle != 'iasc_space') {
    return;
  }

  $urls = iasc_content_build_section_menu($group);

  // Check for custom links.
  if (isset($paragraph->field_custom_link)) {
    foreach ($paragraph->field_custom_link as $link) {
      $url = $link->getUrl();

      // Use link title if set.
      if (!empty($link->title)) {
        $link_title = $link->title;
      }
      else {
        if ($url->isExternal()) {
          // Use url as title.
          $link_title = $url->toString();
        }
        else {
          // Load title from linked entity.
          $params = $url->getRouteParameters();
          $entity = \Drupal::entityTypeManager()
            ->getStorage(key($params))
            ->load(reset($params));
          $link_title = $entity->label();
        }
      }

      // Append to the end.
      $urls[] = Link::fromTextAndUrl($link_title, $url)->toString();
    }
  }
  $vars['section_links'] = $urls;
}

/**
 * Implements hook_node_access().
 */
function iasc_content_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Only check view mode for anonymous users.
  if ($node->isPublished() && isset($node->group_content_access) && $op === 'view') {
    // Check group settings.
    if ($node->group_content_access->value == 0) {
      return AccessResult::neutral();
    }

    // Allow access to nodes marked as being public.
    if ($node->group_content_access->value == 1) {
      return AccessResult::allowed();
    }

    // Check membership for private content.
    if ($node->group_content_access->value == 2) {
      foreach (GroupContent::loadByEntity($node) as $group_content) {
        if ($group_content->getGroup()->getMember($account)) {
          return AccessResult::allowed();
        }
      }
      return AccessResult::forbidden();
    }
  }

  // Check audience field.
  if ($node->isPublished() && isset($node->field_section_audience) && isset($node->field_section_audience->value) && $op === 'view') {
    // Allow access to Public section.
    if ($node->field_section_audience->value == 'public') {
      return AccessResult::allowed();
    }

    // Deny access to IASC section.
    if ($node->field_section_audience->value == 'iasc') {
      if ($account->hasPermission('access iasc content')) {
        return AccessResult::allowed();
      }
      else {
        return AccessResult::forbidden();
      }
    }

    // Deny access to Donor section.
    if ($node->field_section_audience->value == 'donor') {
      if ($account->hasPermission('access donor content')) {
        return AccessResult::allowed();
      }
      else {
        return AccessResult::forbidden();
      }
    }

    // Check Member only access.
    if ($node->field_section_audience->value == 'member') {
      foreach (GroupContent::loadByEntity($node) as $group_content) {
        if ($group_content->getGroup()->getMember($account)) {
          return AccessResult::allowed();
        }
      }
      return AccessResult::forbidden();
    }
  }

  // Check legacy field.
  if ($node->isPublished() && isset($node->oa_section_ref) && isset($node->oa_section_ref->entity) && $op === 'view') {
    // Allow access to Public section.
    if (strpos($node->oa_section_ref->entity->title->value, '(Public)')) {
      return AccessResult::allowed();
    }

    // Deny access to IASC section.
    if (strpos($node->oa_section_ref->entity->title->value, '(IASC)')) {
      if ($account->hasPermission('access iasc content')) {
        return AccessResult::allowed();
      }
      else {
        return AccessResult::forbidden();
      }
    }

    // Deny access to Donor section.
    if (strpos($node->oa_section_ref->entity->title->value, '(Donor)')) {
      if ($account->hasPermission('access donor content')) {
        return AccessResult::allowed();
      }
      else {
        return AccessResult::forbidden();
      }
    }
  }
}

/**
 * Convert file field to media field.
 */
function iasc_content_file_field_to_media() {
  $convertions = [
    'node' => [
      'panopoly_page' => [
        'field_featured_image' => 'field_banner_image|image',
      ],
      'oa_wiki_page' => [
        'field_product_thumbnail' => 'field_thumbnail|image',
        'field_oa_media' => 'field_media_files|file',
      ],
      'contact' => [
        'field_photo' => 'field_media_photo|image',
      ],
      'oa_discussion_post' => [
        'field_oa_media' => 'field_media_files|file',
      ],
      'oa_worktracker_task' => [
        'field_oa_media' => 'field_media_files|file',
      ],
    ],
    'group' => [
      'iasc_group' => [
        'field_primary_image' => 'field_group_banner|image',
      ],
      'iasc_space' => [
        'field_banner_image' => 'field_group_banner|image',
        'field_primary_image' => 'field_main_image|image',
      ],
    ],
    'taxonomy_term' => [
      'panopoly_categories' => [
        'field_featured_image' => 'field_featured_media|image',
      ],
      'section_type' => [
        'field_oa_icon_image' => 'field_icon_image|image',
      ],
    ],
    'paragraph' => [
      'paragraph_media' => [
        'field_oa_media' => 'field_media|file',
      ],
    ],
  ];

  foreach ($convertions as $entity_type => $entity_info) {
    foreach ($entity_info as $bundle => $bundle_info) {
      foreach ($bundle_info as $from => $to_info) {
        \Drupal::logger('iasc_content')->notice(
          sprintf('Starting fore entity "%s", bundle "%s" from "%s" to "%s".', $entity_type, $bundle, $from, $to_info)
        );

        // Explode to field to get media type.
        $parts = explode('|', $to_info);
        $to = $parts[0];
        $media_type = 'image';
        if (isset($parts[1])) {
          $media_type = $parts[1];
        }

        // Make sure to field exists.
        _iasc_content_media_present($entity_type, $bundle, $to, $media_type);

        // Only load entities if from has a value and to is empty.
        $query = \Drupal::entityQuery($entity_type);
        $query->exists($from);
        $query->notExists($to);
        $query->range(0, 750);

        // Filter by bundle.
        if ($entity_type == 'taxonomy_term') {
          $query->condition('vid', $bundle);
        }
        else {
          $query->condition('type', $bundle);
        }

        $ids = $query->execute();
        $entities = \Drupal::entityTypeManager()
          ->getStorage($entity_type)
          ->loadMultiple($ids);

        foreach ($entities as $entity) {
          foreach ($entity->get($from) as $source) {
            if ($source->entity) {
              $media_entity = _iasc_content_media_entity(
                $source->entity,
                $source->alt,
                $media_type
              );
              $entity->{$to}[] = [
                'target_id' => $media_entity->id(),
              ];
            }
          }

          // Save if the new field has content.
          if (!empty($entity->{$to}->entity)) {
            $entity->save();
            \Drupal::logger('iasc_content')->notice(
              sprintf('Updated %s for node "%s" [%s].', $media_type, $entity->label(), $entity->id())
            );
          }
        }
      }
    }
  }
}

/**
 * Creates a media image entity from a file entity.
 *
 * @param \Drupal\file\FileInterface $file
 *   The existing file object.
 * @param string $alt
 *   The image alt text.
 *
 * @return \Drupal\media_entity\Entity\Media
 *   The media entity.
 *
 * @see https://chromatichq.com/blog/migrating-drupal-file-fields-media-entities-without-migrate-module
 */
function _iasc_content_media_entity(FileInterface $file, $alt, $bundle) {
  $media_entity = Media::create([
    'bundle' => $bundle,
    'uid' => '1',
    'name' => $file->alt,
    'status' => TRUE,
    'field_media_' . $bundle => [
      'target_id' => $file->id(),
      'alt' => $alt,
    ],
  ]);
  $media_entity->save();
  return $media_entity;
}

/**
 * Make sure media field exists.
 */
function _iasc_content_media_present($entity_type, $bundle, $field_name, $media_type) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'media',
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => sprintf('Media field for %s', $media_type),
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Update membership position.
 */
function iasc_content_membership_position_to_list() {
  $query = \Drupal::entityQuery('paragraph');
  $query->exists('field_position');
  $query->notExists('field_member_position');
  $query->condition('type', 'membership');
  $ids = $query->execute();

  $entities = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadMultiple($ids);

  foreach ($entities as $entity) {
    $entity->field_member_position->value = strtolower($entity->field_position->value);
    $entity->save();
  }
}

/**
 * Convert oa_section_ref.
 */
function iasc_content_convert_oa_section_ref() {
  $types = [
    'announcement',
    'oa_discussion_post',
    'oa_event',
    'oa_wiki_page',
    'oa_worktracker_task',
  ];

  foreach ($types as $bundle) {
    // Make sure field is present.
    _iasc_content_section_present('node', $bundle, 'field_section');
    _iasc_content_section_audience_present('node', $bundle, 'field_section_audience');

    $query = \Drupal::entityQuery('node');
    $query->condition('type', $bundle);
    $query->exists('oa_section_ref');
    $query->notExists('field_section');
    $ids = $query->execute();

    $entities = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($ids);

    foreach ($entities as $entity) {
      if (!isset($entity->oa_section_ref->entity)) {
        continue;
      }

      $old_label = $entity->oa_section_ref->entity->title->value;
      $parts = explode(' ', $old_label);

      $section = trim($parts[0]);
      $entity->field_section->value = strtolower($section);

      if (isset($parts[1])) {
        $section_audience = trim(str_replace(['(', ')'], '', $parts[1]));
        $entity->field_section_audience->value = strtolower($section_audience);
      }

      $entity->save();
    }
  }
}

/**
 * Make sure section field exists.
 */
function _iasc_content_section_present($entity_type, $bundle, $field_name) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'news' => 'News',
          'documents' => 'Documents',
          'meetings' => 'Meetings',
        ],
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => 'Section',
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Make sure section audience field exists.
 */
function _iasc_content_section_audience_present($entity_type, $bundle, $field_name) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'public' => 'Public',
          'iasc' => 'IASC',
          'donor' => 'Donor',
        ],
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => 'Section audience',
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Legacy command from Drupal 7 version.
 */
function iasc_content_oa_buttons_get_command_buttons_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    '_legacy' => 'do not use - oa_buttons_get_command_buttons_options',
    'debug' => $definition->getName(),
  ];
}

/**
 * Legacy command from Drupal 7 version.
 */
function iasc_content_oa_related_paragraphs_field_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    '_legacy' => 'do not use - oa_related_paragraphs_field_allowed_values',
    'debug' => $definition->getName(),
  ];
}

/**
 * Legacy command from Drupal 7 version.
 */
function iasc_content_oa_sections_field_oa_section_type_menu_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    0 => 'do not use - oa_sections_field_oa_section_type_menu_allowed_values',
    999 => $definition->getName(),
  ];
}

/**
 * Allowed values for task content type.
 */
function iasc_content_oa_worktracker_allowed_values_callback(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $field_name = $definition->getName();

  // Priority values.
  if (strpos($field_name, 'field_oa_worktracker_priority') === 0) {
    return [
      '1' => 'Learning Opportunity',
      '2' => 'Critical',
      '3' => 'Important',
    ];
  }

  // Status values.
  if (strpos($field_name, 'field_oa_worktracker_task_status') === 0) {
    return [
      'not_initiated' => 'Not Initiated',
      'ongoing' => 'Ongoing',
      'implemented' => 'Implemented',
      'closed' => 'Closed',
    ];
  }

  // Type values.
  if (strpos($field_name, 'field_oa_worktracker_task_type') === 0) {
    return [
      'natural_disaster' => 'Natural Disaster',
      'conflict' => 'Conflict',
    ];
  }

  return [
    '_legacy' => 'do not use - oa_worktracker_allowed_values_callback',
    'debug' => $definition->getName(),
  ];
}

/**
 * Get content types and field to act.
 */
function iasc_content_node_field_group_settings() {
  $ctypes = [
    'action_point',
    'announcement',
    'oa_discussion_post',
    'oa_event',
    'oa_wiki_page',
    'oa_worktracker_task',
  ];

  $add = [];
  $edit = [];

  foreach ($ctypes as $ctype) {
    $add[] = 'node_' . $ctype . '_form';
    $edit[] = 'node_' . $ctype . '_edit_form';
  }

  return [
    'form_id_add' => $add,
    'form_id_edit' => $edit,
    'group_field' => 'field_iasc_audience',
  ];
}

/**
 * Form alter to sync audience field with gnodes.
 */
function iasc_content_node_field_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $settings = iasc_content_node_field_group_settings();

  // Add node.
  if (in_array($form_id, $settings['form_id_add'])) {
    // Prefill dropdown.
    if ($form_state->get('group') && $form_state->get('group')->id()) {
      $form[$settings['group_field']]['widget']['#default_value'] = [$form_state->get('group')->id() => $form_state->get('group')->id()];
      $form[$settings['group_field']]['widget']['#disabled'] = TRUE;
    }
    else {
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'iasc_content_node_field_group_add_custom_callback_group';
        }
      }
    }
  }

  // Edit node.
  if (in_array($form_id, $settings['form_id_edit'])) {
    // Prefill dropdown.
    if ($form_state->getFormObject()->getEntity()) {
      $node = $form_state->getFormObject()->getEntity();
      $storage = \Drupal::entityTypeManager()->getStorage('group_content');
      $activGroupListEntity = $storage->loadByEntity($node);
      $gids_existing = [];
      foreach ($activGroupListEntity as $groupContent) {
        $gids_existing[$groupContent->getGroup()->id()] = $groupContent->getGroup()->label();
      }

      $form[$settings['group_field']]['widget']['#default_value'] = array_keys($gids_existing);
    }

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'iasc_content_node_field_group_edit_custom_callback_group';
      }
    }
  }
}

/**
 * Add a new node to a group if the audience field is set.
 */
function iasc_content_node_field_group_add_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = iasc_content_node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);
  $gids = $form_state->getValue($settings['group_field']);

  foreach ($gids as $gid) {
    // Skip -none- option.
    if ($gid['target_id'] == '_none') {
      continue;
    }

    $group = Group::load($gid['target_id']);
    /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
    $plugin = $group->getGroupType()->getContentPlugin('group_node:' . $node->bundle());
    $group_content = GroupContent::create([
      'type' => $plugin->getContentTypeConfigId(),
      'gid' => $group->id(),
      'entity_id' => $node->id(),
    ]);
    $group_content->save();
  }

}

/**
 * Update group relations based on audience field.
 */
function iasc_content_node_field_group_edit_custom_callback_group($form, FormStateInterface $form_state) {
  $settings = iasc_content_node_field_group_settings();
  $nid = $form_state->getValue('nid');
  $node = Node::load($nid);

  // Wanted groups.
  $gids = $form_state->getValue($settings['group_field']);
  $gids_wanted = [];
  foreach ($gids as $gid) {
    $gids_wanted[$gid['target_id']] = $gid['target_id'];
  }

  // Existing groups.
  $gids_existing = [];

  // Deleted groups.
  $gnodes_existing = [];

  // Loads all groups with a relation to the node.
  $storage = \Drupal::entityTypeManager()->getStorage('group_content');
  $activGroupListEntity = $storage->loadByEntity($node);
  foreach ($activGroupListEntity as $groupContent) {
    $gids_existing[$groupContent->getGroup()->id()] = $groupContent->getGroup()->id();
    $gnodes_existing[$groupContent->getGroup()->id()] = $groupContent;
  }

  // Union for existing and wanted groups.
  $gids_union = $gids_existing + $gids_wanted;

  // Gnodes to create.
  $gids_create = array_diff($gids_union, $gids_existing);

  // Gnodes to delete.
  $gids_delete = array_diff($gids_union, $gids_wanted);

  foreach ($gids_create as $gid) {
    // Skip -none- option.
    if ($gid == '_none') {
      continue;
    }

    $group = Group::load($gid);
    $plugin = $group->getGroupType()->getContentPlugin('group_node:' . $node->bundle());
    $group_content = GroupContent::create([
      'type' => $plugin->getContentTypeConfigId(),
      'gid' => $group->id(),
      'entity_id' => $node->id(),
    ]);
    $group_content->save();
  }

  foreach ($gids_delete as $gid) {
    // Skip -none- option.
    if ($gid == '_none') {
      continue;
    }

    $gnodes_existing[$gid]->delete();
  }

}

/**
 * Implements hook_theme().
 */
function iasc_content_theme() {
  return [
    'iasc_section_menu_block' => [
      'variables' => [
        'title' => NULL,
        'section_links' => NULL,
      ],
      'template' => 'block--iasc-section-menu-block',
    ],
    'iasc_header_search_block' => [
      'variables' => [
        'title' => NULL,
        'keyword' => NULL,
      ],
      'template' => 'block--iasc-header-search-block',
    ],
    'iasc_content_pager' => [
      'variables' => [
        'pager_id' => NULL,
        'links' => NULL,
      ],
      'template' => 'iasc-content-pager',
    ],
    'iasc_content_alpha_widget' => [
      'render element' => 'widget',
      'template' => 'iasc-content-alpha-widget',
    ],
  ];
}

/**
 * Implements hook_file_download().
 */
function iasc_content_file_download($uri) {
  $entity_types_to_check = [
    'node' => [
      'field_media_files',
    ],
    'paragraph' => [
      'field_media',
    ],
  ];
  // Only check private files.
  $scheme = StreamWrapperManager::getScheme($uri);
  if ($scheme != 'private') {
    return;
  }

  // Load the file(s).
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);

  if (count($files)) {
    foreach ($files as $file) {
      // Case sensitive names.
      if ($file->getFileUri() !== $uri) {
        continue;
      }

      $usage_list = \Drupal::service('file.usage')->listUsage($file);
      $referencing_entity_is_accessible = FALSE;
      $references = empty($usage_list['file']) ? [] : $usage_list['file'];
      foreach ($references as $entity_type => $entity_ids_usage_count) {
        $referencing_entities = \Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple(array_keys($entity_ids_usage_count));

        /** @var \Drupal\Core\Entity\EntityInterface $referencing_entity */
        foreach ($referencing_entities as $referencing_entity) {
          // Check for media.
          if ($entity_type == 'media') {
            $media_id = $referencing_entity->id();

            // Load items referencing this item.
            foreach ($entity_types_to_check as $entity_type_to_check => $fields) {
              $query = \Drupal::entityQuery($entity_type_to_check);
              if (count($fields) > 1) {
                $group = $query->orConditionGroup();
                foreach ($fields as $field_name) {
                  $group->condition($field_name . '.%delta.target_id', $media_id);
                }
              }
              else {
                $field_name = reset($fields);
                $query->condition($field_name . '.%delta.target_id', $media_id);
              }
              $ids = $query->execute();

              $entities = \Drupal::entityTypeManager()
                ->getStorage($entity_type_to_check)
                ->loadMultiple($ids);

              foreach ($entities as $entity) {
                if ($entity
                  ->access('view', NULL, TRUE)
                  ->isAllowed()) {
                  $referencing_entity_is_accessible = TRUE;
                  break 4;
                }
              }
            }
          }
          else {
            if ($referencing_entity
              ->access('view', NULL, TRUE)
              ->isAllowed()) {
              $referencing_entity_is_accessible = TRUE;
              break 2;
            }
          }
        }
      }

      if (!$referencing_entity_is_accessible) {
        return -1;
      }
    }
  }
}

/**
 * Fix non-existent config entity name.
 */
function iasc_content_fix_entities($entity_type, $bundle, $field_name) {
  $key_value_factory = \Drupal::service('keyvalue');
  $field_map_kv_store = $key_value_factory->get('entity.definitions.bundle_field_map');
  $map = $field_map_kv_store->get($entity_type);
  unset($map[$field_name]['bundles'][$bundle]);
  $field_map_kv_store->set($entity_type, $map);
}

/**
 * Implemtents hook_views_pre_render().
 */
function iasc_content_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'iasc_group_content') {
    $group_id = $view->args[0];
    if ($group_id) {
      if ($group = $group = \Drupal::entityTypeManager()->getStorage('group')->load($group_id)) {
        $view->setTitle($view->getTitle() . $group->label());
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 *
 * @see https://www.drupal.org/project/drupal/issues/2769407
 */
function iasc_content_views_pre_build(ViewExecutable $view) {
  if ($view->storage->id() != 'updates') {
    return;
  }

  if (!isset($view->filter['field_grand_bargain_content_value'])) {
    return;
  }

  if ($view->filter['field_grand_bargain_content_value']->value == 0) {
    $view->filter['field_grand_bargain_content_value']->accept_null = TRUE;
  }
}

/**
 * Implements hook_group_content_insert().
 */
function iasc_content_group_content_insert(GroupContent $entity) {
  iasc_content_group_content_update($entity);
}

/**
 * Implements hook_group_content_insert().
 */
function iasc_content_group_content_update(GroupContent $entity) {
  $group_content_type = $entity->getGroupContentType();
  if ($group_content_type->get('content_plugin') !== 'group_node:announcement') {
    return;
  }

  $group = $entity->getGroup();
  if ($group->id() != 19568) {
    return;
  }

  /** @var Drupal\node\Entity\Node $node */
  $node = $entity->getEntity();
  $current_status = $node->get('field_grand_bargain_content')->getValue()[0]['value'];
  if ($current_status) {
    return;
  }

  $node->set('field_grand_bargain_content', TRUE);
  $node->save();
}

/**
 * Implements hook_group_content_delete().
 */
function iasc_content_group_content_delete(GroupContent $entity) {
  $group_content_type = $entity->getGroupContentType();
  if ($group_content_type->get('content_plugin') !== 'group_node:announcement') {
    return;
  }

  $group = $entity->getGroup();
  if ($group->id() != 19568) {
    return;
  }

  /** @var Drupal\node\Entity\Node $node */
  $node = $entity->getEntity();
  $current_status = $node->get('field_grand_bargain_content')->getValue()[0]['value'];
  if (!$current_status) {
    return;
  }

  $node->set('field_grand_bargain_content', FALSE);
  $node->save();
}

/**
 * Implements hook_preprocess_group().
 */
function iasc_content_preprocess_group(&$vars) {
  $group = $vars['group'];

  if (!($group instanceof Group)) {
    return;
  }

  if (!$group->hasField('field_archive_group')) {
    return;
  }

  $vars['is_archived'] = FALSE;
  if (!$group->field_archive_group->value) {
    return;
  }

  $vars['is_archived'] = TRUE;
  $vars['archive_message'] = \Drupal::config('iasc_content.settings')->get('archive_message') ?? 'This group has been archived.';
  if (!$group->field_archive_message->isEmpty()) {
    $vars['archive_message'] = $group->field_archive_message->value;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function iasc_content_preprocess_node(&$vars) {
  $node = $vars['node'];

  if (!($node instanceof Node)) {
    return;
  }

  /** @var \Drupal\node\Entity\Node $node */
  if (isset($node->original_nid)) {
    // Restore original nid and url.
    $node->nid = $node->original_nid;
    $vars['url'] = Url::fromUri('internal:/node/' . $node->original_nid)->toString();
  }

  $vars['is_archived'] = FALSE;
  $storage = \Drupal::entityTypeManager()->getStorage('group_content');
  $activGroupListEntity = $storage->loadByEntity($node);

  // Not a group node.
  if (empty($activGroupListEntity)) {
    return;
  }

  foreach ($activGroupListEntity as $groupContent) {
    $group = $groupContent->getGroup();
    if (!$group->hasField('field_archive_group')) {
      continue;
    }

    // Allow it if part of at least 1 non-archived group.
    if (!$group->field_archive_group->value) {
      return;
    }
  }

  $vars['is_archived'] = TRUE;
  $vars['archive_message'] = \Drupal::config('iasc_content.settings')->get('archive_message') ?? 'This group has been archived.';
  if (!$group->field_archive_message->isEmpty()) {
    $vars['archive_message'] = $group->field_archive_message->value;
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function iasc_content_preprocess_paragraph__meetings_upcoming(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $group = $paragraph->getParentEntity();

  if (!$group) {
    return;
  }

  // Set max number of items to 5 by default.
  $max_number_of_items = $paragraph->field_max_number_of_events->value ?? 5;

  // Load index.
  $index = Index::load('default_solr_index');

  // Create list of events with all future occurences.
  $query = $index->query();
  $query->addCondition('field_iasc_audience', $group->id());
  $query->addCondition('type', 'oa_event');
  $query->addCondition('all_dates', time(), '>=');
  $query->range(0, $max_number_of_items);
  $query->sort('all_dates', 'ASC');
  $query->sort('changed', 'ASC');

  // Execute the search.
  $results = $query->execute();

  // Extract Ids.
  $ids = [];
  foreach ($results as $item) {
    $data = explode(':', $item->getId());
    $data = explode('/', $data[1]);
    $ids[] = $data[1];
  }

  if (empty($ids)) {
    return;
  }

  $events = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $meetings = [];
  foreach ($events as $event) {
    foreach ($event->field_oa_date as $date_item) {
      foreach ($date_item->getHelper()->getOccurrences(new \DateTime(), NULL) as $date) {
        if ($date->getStart()->getTimestamp() >= time()) {
          $new_event = clone $event;
          $new_event->nid = $event->id() . $date->getStart()->getTimestamp();
          $new_event->original_nid = $event->id();
          $new_event->set('field_oa_date', [
            'value' => $date->getStart()->format('Y-m-d\TH:i:s'),
            'end_value' => $date->getEnd()->format('Y-m-d\TH:i:s'),
            'timezone' => $date->getStart()->getTimezone()->getName(),
          ]);
          $meetings[$event->id() . ':' . $date->getStart()->getTimestamp()] = $new_event;
        }
      }
    }
  }

  // Sort the meetings.
  usort($meetings, function ($a, $b) {
    return strcmp($a->field_oa_date->first()->getValue()['value'], $b->field_oa_date->first()->getValue()['value']);
  });

  $meetings = array_splice($meetings, 0, $max_number_of_items);

  $build = [
    'future_title' => [
      '#type' => 'markup',
      '#markup' => t('<h2>Upcoming meetings</h2>'),
    ],
    'future' => $view_builder->viewMultiple($meetings, 'teaser'),
  ];

  // Link to all meetings.
  if ($paragraph->field_link_to_all_meetings->value) {
    $build['future_link'] = [
      '#type' => 'link',
      '#title' => 'View more meetings',
      '#url' => Url::fromRoute('iasc_content.group.meetings', [
        'group' => $group->id(),
      ]),
    ];
  }

  $variables['content']['meetings'] = $build;
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function iasc_content_preprocess_paragraph__meetings_past(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $group = $paragraph->getParentEntity();

  if (!$group) {
    return;
  }

  // Set max number of items to 5 by default.
  $max_number_of_items = $paragraph->field_max_number_of_events->value ?? 5;

  // Load index.
  $index = Index::load('default_solr_index');

  // Create list of events with all future occurences.
  $query = $index->query();
  $query->addCondition('field_iasc_audience', $group->id());
  $query->addCondition('type', 'oa_event');
  $query->addCondition('all_dates', time(), '<');
  $query->range(0, $max_number_of_items);
  $query->sort('all_dates', 'DESC');
  $query->sort('changed', 'DESC');

  // Execute the search.
  $results = $query->execute();

  // Extract Ids.
  $ids = [];
  foreach ($results as $item) {
    $data = explode(':', $item->getId());
    $data = explode('/', $data[1]);
    $ids[] = $data[1];
  }

  if (empty($ids)) {
    return;
  }

  $events = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $meetings = [];
  foreach ($events as $event) {
    foreach ($event->field_oa_date as $date_item) {
      foreach ($date_item->getHelper()->getOccurrences(NULL, new \DateTime()) as $date) {
        if ($date->getStart()->getTimestamp() < time()) {
          $new_event = clone $event;
          $new_event->nid = $event->id() . $date->getStart()->getTimestamp();
          $new_event->original_nid = $event->id();
          $new_event->set('field_oa_date', [
            'value' => $date->getStart()->format('Y-m-d\TH:i:s'),
            'end_value' => $date->getEnd()->format('Y-m-d\TH:i:s'),
            'timezone' => $date->getStart()->getTimezone()->getName(),
          ]);
          $meetings[$event->id() . ':' . $date->getStart()->getTimestamp()] = $new_event;
        }
      }
    }
  }

  // Sort the meetings.
  usort($meetings, function ($a, $b) {
    return strcmp($b->field_oa_date->first()->getValue()['value'], $a->field_oa_date->first()->getValue()['value']);
  });

  $meetings = array_splice($meetings, 0, $max_number_of_items);

  $build = [
    'past_title' => [
      '#type' => 'markup',
      '#markup' => t('<h2>Past meetings</h2>'),
    ],
    'past' => $view_builder->viewMultiple($meetings, 'teaser'),
  ];

  // Link to all meetings.
  if ($paragraph->field_link_to_all_meetings->value) {
    $build['past_link'] = [
      '#type' => 'link',
      '#title' => 'View more meetings',
      '#url' => Url::fromRoute('iasc_content.group.meetings', [
        'group' => $group->id(),
      ]),
    ];
  }

  $variables['content']['meetings'] = $build;
}


/**
 * Change old meeting paragraphs to new ones.
 */
function iasc_content_migrate_meetings_paragraphs() {
  $query = \Drupal::entityQuery('paragraph');
  $query->condition('type', 'view');
  $query->exists('field_view');
  $query->condition('field_view', 'iasc_events');
  $ids = $query->execute();

  $paragraphs = \Drupal::entityTypeManager()
  ->getStorage('paragraph')
  ->loadMultiple($ids);

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  foreach ($paragraphs as $paragraph) {
    $display = $paragraph->field_view->getValue()[0]['display_id'];

    switch ($display) {
      case 'upcoming_meetings':
        $paragraph->type = 'meetings_upcoming';
        $paragraph->save();
        break;

      case 'past_meetings':
        $paragraph->type = 'meetings_past';
        $paragraph->save();
        break;

    }
  }
}
