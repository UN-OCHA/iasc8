<?php

/**
 * @file
 * IASC Content helpers.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\FileInterface;
use Drupal\group\Entity\Group;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_content_form_alter(&$form, &$form_state, $form_id) {
  // Hide legacy fields.
  if (isset($form['field_legacy_publish'])) {
    $form['field_legacy_publish']['#access'] = FALSE;
  }

  if (isset($form['field_legacy_id'])) {
    $form['field_legacy_id']['#access'] = FALSE;
  }
}

/**
 * Add default sidebar blocks to a space.
 */
function iasc_content_space_sidebar_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_sidebar')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add section menu.
  $paragraph = Paragraph::create([
    'type' => 'section_menu',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add documents.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'documents',
    'display_id' => 'recent_documents_list',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add chair.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_contacts',
    'display_id' => 'chair',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_sidebar', $current);
  $group->save();
}

/**
 * Add default content blocks to a space.
 */
function iasc_content_space_content_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_content')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add upcoming meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'upcoming_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add past meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'past_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add recent news.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_content',
    'display_id' => 'block_recent_5',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_content', $current);
  $group->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function iasc_content_group_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'iasc_space') {
    iasc_content_space_content_defaults($entity->id());
    iasc_content_space_sidebar_defaults($entity->id());
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph(&$vars) {
  $paragraph = $vars['paragraph'];
  if (!($paragraph instanceof Paragraph)) {
    return;
  }

  $bundle = $paragraph->bundle();
  switch ($bundle) {
    case 'section_menu':
      iasc_content_preprocess_paragraph_iasc_space_section_menu($vars);
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph_iasc_space_section_menu(&$vars) {
  $paragraph = $vars['paragraph'];

  // Check which links needs to be displayed.
  $group = $paragraph->getParentEntity();
  if (!($group instanceof Group)) {
    return;
  }

  // Only allowed on spaces.
  $group_bundle = $group->bundle();
  if ($group_bundle != 'iasc_space') {
    return;
  }

  $supported_types = [
    'News' => 'announcement',
    'Events' => 'oa_event',
    'Documents' => 'oa_wiki_page',
  ];

  $urls = [];
  foreach ($supported_types as $label => $bundle) {
    $content = $group->getContent('group_node:' . $bundle);
    // If we find a node, add a link to the view.
    if (count($content) > 0) {
      $urls[] = Link::fromTextAndUrl($label, Url::fromUri('internal:/group/2605/content/' . $bundle))->toString();
    }
  }

  $vars['section_links'] = $urls;
}

/**
 * Implements hook_node_access().
 */
function iasc_content_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Only check view mode for anonymous users.
  if (isset($node->group_content_access) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to nodes marked as being public.
    if ($node->group_content_access->value == 1) {
      return AccessResult::allowed();
    }

    // Deny access to nodes marked as being private.
    if ($node->group_content_access->value == 2) {
      return AccessResult::forbidden();
    }
  }

  // Only check view mode for anonymous users.
  if (isset($node->oa_section_ref) && isset($node->oa_section_ref->entity) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to Public section.
    if (strpos($node->oa_section_ref->entity->title->value, '(Public)')) {
      return AccessResult::allowed();
    }

    // Deny access to IASC and Donor section.
    if (strpos($node->oa_section_ref->entity->title->value, '(IASC)') || strpos($node->oa_section_ref->entity->title->value, '(Donor)')) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Convert file field to media field.
 */
function iasc_content_file_field_to_media() {
  $convertions = [
    'node' => [
      'panopoly_page' => [
        'field_featured_image' => 'field_banner_image|image',
      ],
      'oa_wiki_page' => [
        'field_product_thumbnail' => 'field_thumbnail|image',
        'field_oa_media' => 'field_media_files|file',
      ],
    ],
    'group' => [
      'iasc_group' => [
        'field_primary_image' => 'field_group_banner|image',
      ],
      'iasc_space' => [
        'field_banner_image' => 'field_group_banner|image',
        'field_primary_image' => 'field_main_image|image',
      ],
    ],
    'taxonomy_term' => [
      'panopoly_categories' => [
        'field_featured_image' => 'field_featured_media|image',
      ],
      'section_type' => [
        'field_oa_icon_image' => 'field_icon_image|image',
      ],
    ],
  ];

  foreach ($convertions as $entity_type => $entity_info) {
    foreach ($entity_info as $bundle => $bundle_info) {
      foreach ($bundle_info as $from => $to_info) {
        // Explode to field to get media type.
        $parts = explode('|', $to_info);
        $to = $parts[0];
        $media_type = 'image';
        if (isset($parts[1])) {
          $media_type = $parts[1];
        }

        // Make sure to field exists.
        _iasc_content_media_present($entity_type, $bundle, $to, $media_type);

        // Only load entities if from has a value and to is empty.
        $query = \Drupal::entityQuery($entity_type);
        $query->exists($from);
        $query->notExists($to);
        $query->range(0, 250);

        // Filter by bundle.
        if ($entity_type == 'taxonomy_term') {
          $query->condition('vid', $bundle);
        }
        else {
          $query->condition('type', $bundle);
        }

        $ids = $query->execute();
        $entities = \Drupal::entityTypeManager()
          ->getStorage($entity_type)
          ->loadMultiple($ids);

        foreach ($entities as $entity) {
          foreach ($entity->get($from) as $source) {
            if ($source->entity) {
              $media_entity = _iasc_content_media_entity(
                $source->entity,
                $source->alt,
                $media_type
              );
              $entity->{$to}[] = [
                'target_id' => $media_entity->id(),
              ];
            }
          }

          // Save if the new field has content.
          if (!empty($entity->{$to}->entity)) {
            $entity->save();
            \Drupal::logger('iasc_content')->notice(
              sprintf('Updated %s for node "%s" [%s].', $media_type, $entity->label(), $entity->id())
            );
          }
        }
      }
    }
  }
}

/**
 * Creates a media image entity from a file entity.
 *
 * @param \Drupal\file\FileInterface $file
 *   The existing file object.
 * @param string $alt
 *   The image alt text.
 *
 * @return \Drupal\media_entity\Entity\Media
 *   The media entity.
 *
 * @see https://chromatichq.com/blog/migrating-drupal-file-fields-media-entities-without-migrate-module
 */
function _iasc_content_media_entity(FileInterface $file, $alt, $bundle) {
  $media_entity = Media::create([
    'bundle' => $bundle,
    'uid' => '1',
    'name' => $file->alt,
    'status' => TRUE,
    'field_media_' . $bundle => [
      'target_id' => $file->id(),
      'alt' => $alt,
    ],
  ]);
  $media_entity->save();
  return $media_entity;
}

/**
 * Make sure field exists.
 */
function _iasc_content_media_present($entity_type, $bundle, $field_name, $media_type) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  $field_storage = FieldStorageConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'type' => 'entity_reference',
    'settings' => [
      'target_type' => 'media',
    ],
  ]);
  $field_storage->save();

  $field = FieldConfig::create(array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => sprintf('Media field for %s', $media_type),
  ));
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}
