<?php

/**
 * @file
 * IASC Content helpers.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\FileInterface;
use Drupal\group\Entity\Group;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iasc_content_form_alter(&$form, &$form_state, $form_id) {
  // Hide legacy fields.
  if (isset($form['field_legacy_publish'])) {
    $form['field_legacy_publish']['#access'] = FALSE;
  }

  if (isset($form['field_legacy_id'])) {
    $form['field_legacy_id']['#access'] = FALSE;
  }
}

/**
 * Add default sidebar blocks to a space.
 */
function iasc_content_space_sidebar_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_sidebar')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add chair.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_contacts',
    'display_id' => 'chair',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add section menu.
  $paragraph = Paragraph::create([
    'type' => 'section_menu',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add documents.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'documents',
    'display_id' => 'recent_documents_list',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_sidebar', $current);
  $group->save();
}

/**
 * Add default content blocks to a space.
 */
function iasc_content_space_content_defaults($id) {
  $group = entity_load('group', $id);
  $current = $group->get('field_content')->getValue();

  // Bail out if we already have some blocks.
  if (!empty($current)) {
    return;
  }

  // Add upcoming meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'upcoming_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add past meetings.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_events',
    'display_id' => 'past_meetings',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  // Add recent news.
  $paragraph = Paragraph::create([
    'type' => 'view',
  ]);
  $paragraph->set('field_view', [
    'target_id' => 'iasc_content',
    'display_id' => 'block_recent_5',
  ]);

  $paragraph->isNew();
  $paragraph->save();

  $current[] = [
    'target_id' => $paragraph->id(),
    'target_revision_id' => $paragraph->getRevisionId(),
  ];

  $group->set('field_content', $current);
  $group->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function iasc_content_group_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'iasc_space') {
    iasc_content_space_content_defaults($entity->id());
    iasc_content_space_sidebar_defaults($entity->id());
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph(&$vars) {
  $paragraph = $vars['paragraph'];
  if (!($paragraph instanceof Paragraph)) {
    return;
  }

  $bundle = $paragraph->bundle();
  switch ($bundle) {
    case 'section_menu':
      iasc_content_preprocess_paragraph_iasc_space_section_menu($vars);
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function iasc_content_preprocess_paragraph_iasc_space_section_menu(&$vars) {
  $paragraph = $vars['paragraph'];

  // Check which links needs to be displayed.
  $group = $paragraph->getParentEntity();
  if (!($group instanceof Group)) {
    return;
  }

  // Only allowed on spaces.
  $group_bundle = $group->bundle();
  if ($group_bundle != 'iasc_space') {
    return;
  }

  $supported_types = [
    'Documents' => 'oa_wiki_page',
    'Meetings' => 'oa_event',
    'News' => 'announcement',
  ];

  $urls = [];
  foreach ($supported_types as $label => $bundle) {
    $content = $group->getContent('group_node:' . $bundle);
    // If we find a node, add a link to the view.
    if (count($content) > 0) {
      $urls[] = Link::fromTextAndUrl($label, Url::fromUri('internal:/group/' . $group->id() . '/' . strtolower($label)))->toString();
    }
  }

  // Check for custom links.
  if (isset($paragraph->field_custom_link)) {
    foreach ($paragraph->field_custom_link as $link) {
      $url = $link->getUrl();

      // Use link title if set.
      if (!empty($link->title)) {
        $link_title = $link->title;
      }
      else {
        if ($url->isExternal()) {
          // Use url as title.
          $link_title = $url->toString();
        }
        else {
          // Load title from linked entity.
          $params = $url->getRouteParameters();
          $entity = \Drupal::entityTypeManager()
            ->getStorage(key($params))
            ->load(reset($params));
          $link_title = $entity->label();
        }
      }

      // Append to the end.
      $urls[] = Link::fromTextAndUrl($link_title, $url)->toString();
    }
  }
  $vars['section_links'] = $urls;
}

/**
 * Implements hook_node_access().
 */
function iasc_content_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Only check view mode for anonymous users.
  if ($node->isPublished() && isset($node->group_content_access) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to nodes marked as being public.
    if ($node->group_content_access->value == 1) {
      return AccessResult::allowed();
    }

    // Deny access to nodes marked as being private.
    if ($node->group_content_access->value == 2) {
      return AccessResult::forbidden();
    }
  }

  // Only check view mode for anonymous users.
  if ($node->isPublished() && isset($node->oa_section_ref) && isset($node->oa_section_ref->entity) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to Public section.
    if (strpos($node->oa_section_ref->entity->title->value, '(Public)')) {
      return AccessResult::allowed();
    }

    // Deny access to IASC and Donor section.
    if (strpos($node->oa_section_ref->entity->title->value, '(IASC)') || strpos($node->oa_section_ref->entity->title->value, '(Donor)')) {
      return AccessResult::forbidden();
    }
  }

  // Only check view mode for anonymous users.
  if ($node->isPublished() && isset($node->field_section_audience) && isset($node->field_section_audience->value) && $op === 'view' && $account->isAnonymous()) {
    // Allow access to Public section.
    if ($node->field_section_audience->value == 'public') {
      return AccessResult::allowed();
    }

    // Deny access to IASC and Donor section.
    if ($node->field_section_audience->value = 'iasc' || $node->field_section_audience->value = 'donor') {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Convert file field to media field.
 */
function iasc_content_file_field_to_media() {
  $convertions = [
    'node' => [
      'panopoly_page' => [
        'field_featured_image' => 'field_banner_image|image',
      ],
      'oa_wiki_page' => [
        'field_product_thumbnail' => 'field_thumbnail|image',
        'field_oa_media' => 'field_media_files|file',
      ],
      'page' => [
        'field_featured_image' => 'field_banner_image|image',
      ],
      'contact' => [
        'field_photo' => 'field_media_photo|image',
      ],
      'oa_discussion_post' => [
        'field_oa_media' => 'field_media_files|file',
      ],
      'oa_worktracker_task' => [
        'field_oa_media' => 'field_media_files|file',
      ],
    ],
    'group' => [
      'iasc_group' => [
        'field_primary_image' => 'field_group_banner|image',
      ],
      'iasc_space' => [
        'field_banner_image' => 'field_group_banner|image',
        'field_primary_image' => 'field_main_image|image',
      ],
    ],
    'taxonomy_term' => [
      'panopoly_categories' => [
        'field_featured_image' => 'field_featured_media|image',
      ],
      'section_type' => [
        'field_oa_icon_image' => 'field_icon_image|image',
      ],
    ],
    'paragraph' => [
      'paragraph_media' => [
        'field_oa_media' => 'field_media|file',
      ],
    ],
  ];

  foreach ($convertions as $entity_type => $entity_info) {
    foreach ($entity_info as $bundle => $bundle_info) {
      foreach ($bundle_info as $from => $to_info) {
        // Explode to field to get media type.
        $parts = explode('|', $to_info);
        $to = $parts[0];
        $media_type = 'image';
        if (isset($parts[1])) {
          $media_type = $parts[1];
        }

        // Make sure to field exists.
        _iasc_content_media_present($entity_type, $bundle, $to, $media_type);

        // Only load entities if from has a value and to is empty.
        $query = \Drupal::entityQuery($entity_type);
        $query->exists($from);
        $query->notExists($to);
        $query->range(0, 250);

        // Filter by bundle.
        if ($entity_type == 'taxonomy_term') {
          $query->condition('vid', $bundle);
        }
        else {
          $query->condition('type', $bundle);
        }

        $ids = $query->execute();
        $entities = \Drupal::entityTypeManager()
          ->getStorage($entity_type)
          ->loadMultiple($ids);

        foreach ($entities as $entity) {
          foreach ($entity->get($from) as $source) {
            if ($source->entity) {
              $media_entity = _iasc_content_media_entity(
                $source->entity,
                $source->alt,
                $media_type
              );
              $entity->{$to}[] = [
                'target_id' => $media_entity->id(),
              ];
            }
          }

          // Save if the new field has content.
          if (!empty($entity->{$to}->entity)) {
            $entity->save();
            \Drupal::logger('iasc_content')->notice(
              sprintf('Updated %s for node "%s" [%s].', $media_type, $entity->label(), $entity->id())
            );
          }
        }
      }
    }
  }
}

/**
 * Creates a media image entity from a file entity.
 *
 * @param \Drupal\file\FileInterface $file
 *   The existing file object.
 * @param string $alt
 *   The image alt text.
 *
 * @return \Drupal\media_entity\Entity\Media
 *   The media entity.
 *
 * @see https://chromatichq.com/blog/migrating-drupal-file-fields-media-entities-without-migrate-module
 */
function _iasc_content_media_entity(FileInterface $file, $alt, $bundle) {
  $media_entity = Media::create([
    'bundle' => $bundle,
    'uid' => '1',
    'name' => $file->alt,
    'status' => TRUE,
    'field_media_' . $bundle => [
      'target_id' => $file->id(),
      'alt' => $alt,
    ],
  ]);
  $media_entity->save();
  return $media_entity;
}

/**
 * Make sure media field exists.
 */
function _iasc_content_media_present($entity_type, $bundle, $field_name, $media_type) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'media',
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => sprintf('Media field for %s', $media_type),
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Update membership position.
 */
function iasc_content_membership_position_to_list() {
  $query = \Drupal::entityQuery('paragraph');
  $query->exists('field_position');
  $query->notExists('field_member_position');
  $query->condition('type', 'membership');
  $ids = $query->execute();

  $entities = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadMultiple($ids);

  foreach ($entities as $entity) {
    $entity->field_member_position->value = strtolower($entity->field_position->value);
    $entity->save();
  }
}

/**
 * Convert oa_section_ref.
 */
function iasc_content_convert_oa_section_ref() {
  $types = [
    'announcement',
    'oa_discussion_post',
    'oa_event',
    'oa_wiki_page',
    'oa_worktracker_task',
  ];

  foreach ($types as $bundle) {
    // Make sure field is present.
    _iasc_content_section_present('node', $bundle, 'field_section');
    _iasc_content_section_audience_present('node', $bundle, 'field_section_audience');

    $query = \Drupal::entityQuery('node');
    $query->condition('type', $bundle);
    $query->exists('oa_section_ref');
    $query->notExists('field_section');
    $ids = $query->execute();

    $entities = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($ids);

    foreach ($entities as $entity) {
      if (!isset($entity->oa_section_ref->entity)) {
        continue;
      }

      $old_label = $entity->oa_section_ref->entity->title->value;
      $parts = explode(' ', $old_label);

      $section = trim($parts[0]);
      $entity->field_section->value = strtolower($section);

      if (isset($parts[1])) {
        $section_audience = trim(str_replace(['(', ')'], '', $parts[1]));
        $entity->field_section_audience->value = strtolower($section_audience);
      }

      $entity->save();
    }
  }
}

/**
 * Make sure section field exists.
 */
function _iasc_content_section_present($entity_type, $bundle, $field_name) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'news' => 'News',
          'documents' => 'Documents',
          'meetings' => 'Meetings',
        ],
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => 'Section',
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Make sure section audience field exists.
 */
function _iasc_content_section_audience_present($entity_type, $bundle, $field_name) {
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  if (isset($fields[$field_name])) {
    return;
  }

  // Field doesn't exist, create it.
  if (!FieldStorageConfig::loadByName($entity_type, $field_name)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'public' => 'Public',
          'iasc' => 'IASC',
          'donor' => 'Donor',
        ],
      ],
    ]);
    $field_storage->save();
  }

  $field = FieldConfig::create([
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'label' => 'Section audience',
  ]);
  $field->save();

  \Drupal::logger('iasc_content')->notice(
    sprintf('Field %s created.', $field_name)
  );
}

/**
 * Post migrate steps.
 */
function iasc_content_post_migrate_steps() {
  module_load_install('iasc_content');

  iasc_content_update_8001();
  iasc_content_update_8002();
  iasc_content_update_8003();
  iasc_content_update_8004();
  iasc_content_update_8005();
  iasc_content_update_8006();
  iasc_content_update_8007();
  iasc_content_update_8008();
  iasc_content_update_8009();
}
