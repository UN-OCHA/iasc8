<?php

/**
 * @file
 * IASC Migrate helpers.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\iasc_migrate\IascMigrateGroup;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_migrate_prepare_row().
 */
function iasc_migrate_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {

  switch ($migration->id()) {
    case 'upgrade_d7_node_oa_group':
    case 'upgrade_d7_node_oa_space':
      // Slugify the title then set that as the alias for the group.
      $title = $row->getSourceProperty('title');
      $alias = Html::cleanCssIdentifier($title);
      $alias = '/' . strtolower($alias);
      $row->setSourceProperty('alias', $alias);

      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Adds a user to the respective group identified.
 */
function iasc_migrate_user_insert($entity) {
  (new IascMigrateGroup($entity))->addUserToGroup('field_iasc_group_space');
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Adds a node to the respective group identified.
 */
function iasc_migrate_node_insert($entity) {
  switch ($entity->bundle()) {
    case 'action_point':
    case 'announcement':
    case 'oa_discussion_post':
    case 'oa_event':
    case 'oa_ical_importer':
    case 'oa_section':
    case 'oa_team':
    case 'oa_wiki_page':
    case 'oa_worktracker_task':
      (new IascMigrateGroup($entity))->addNodeToGroup('field_iasc_audience');
      break;
  }
}

/**
 * Legacy command from Drupal 7 version.
 */
function oa_buttons_get_command_buttons_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    '_legacy' => 'do not use - oa_buttons_get_command_buttons_options',
    'debug' => $definition->getName(),
  ];
}

/**
 * Legacy command from Drupal 7 version.
 */
function oa_related_paragraphs_field_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    '_legacy' => 'do not use - oa_related_paragraphs_field_allowed_values',
    'debug' => $definition->getName(),
  ];
}

/**
 * Legacy command from Drupal 7 version.
 */
function oa_sections_field_oa_section_type_menu_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return [
    0 => 'do not use - oa_sections_field_oa_section_type_menu_allowed_values',
    999 => $definition->getName(),
  ];
}

/**
 * Allowed values for task content type.
 */
function oa_worktracker_allowed_values_callback(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, &$cacheable = TRUE) {
  $field_name = $definition->getName();

  // Priority values.
  if (strpos($field_name, 'field_oa_worktracker_priority') === 0) {
    return [
      '1' => 'Learning Opportunity',
      '2' => 'Critical',
      '3' => 'Important',
    ];
  }

  // Status values.
  if (strpos($field_name, 'field_oa_worktracker_task_status') === 0) {
    return [
      'not_initiated' => 'Not Initiated',
      'ongoing' => 'Ongoing',
      'implemented' => 'Implemented',
      'closed' => 'Closed',
    ];
  }

  // Type values.
  if (strpos($field_name, 'field_oa_worktracker_task_type') === 0) {
    return [
      'natural_disaster' => 'Natural Disaster',
      'conflict' => 'Conflict',
    ];
  }

  return [
    '_legacy' => 'do not use - oa_worktracker_allowed_values_callback',
    'debug' => $definition->getName(),
  ];
}
